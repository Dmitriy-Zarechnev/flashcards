import { useNavigate } from 'react-router-dom'

import { CardDeleteModal, DeckFormValues, DeckModal } from '@/entities'
import { useIdFromParams } from '@/pages/hooks/useIdFromParams'
import { useDeleteDeckMutation, useGetDeckByIdQuery, useUpdateDeckMutation } from '@/services'
import { Dropdown, Icon, LineLoader, PATH, Typography } from '@/shared'

export const DropdownMenu = () => {
  const navigate = useNavigate()

  // ----- –î–æ—Å—Ç–∞–ª–∏ deck id –∏–∑ url-–∞ -----
  const { deckId } = useIdFromParams()

  // ----- –ó–∞–ø—Ä–æ—Å–∏–ª–∏ deck –ø–æ id —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å cover –∏ name -----
  const {
    data: deckByIdData = { cover: null, isPrivate: false, name: 'name' },
    isLoading: isGetDeckByIdLoading,
  } = useGetDeckByIdQuery({ id: deckId })

  // ----- –ë–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–ª–æ–¥ -----
  const [deleteDeck, { isLoading: isDeleteLoadig }] = useDeleteDeckMutation()
  const [updateDeck, { isLoading: isUpdateLoading }] = useUpdateDeckMutation()

  // TODO —Ç–∞–∫ –∫–∞–∫ —Ä–æ—É—Ç–∏–Ω–≥ —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ navigate => –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å NavLink –∏ —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–µ—ë

  function learnHandler() {
    navigate(`${PATH.DECKSPAGE}/${deckId}/learn`)
  }

  // TODO –Ω—É–∂–Ω–æ –¥–æ–¥–µ–ª–∞—Ç—å updateHandler, –ø—Ä–æ—Å—Ç–æ —É–∂–µ –ø–æ–∑–¥–Ω–æ –ø–æ—à—ë–ª —Å–ø–∞—Ç—å üí©üí©üí©

  async function updateDeckHandler(data: DeckFormValues) {
    await updateDeck({ id: deckId, ...data })
  }

  function updateHandler() {}

  async function deleteDeckHandler() {
    await deleteDeck({ id: deckId })

    /* –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–¥—ã - –≤–µ—Ä–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–ª–æ–¥.
       –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –ø–æ–ø–∞–¥–µ–º –≤ Error404 */
    navigate(PATH.DECKSPAGE)
  }

  function deleteHandler() {
    deleteDeckHandler()
  }

  const isShowLineLoader = isDeleteLoadig || isUpdateLoading || isGetDeckByIdLoading

  return (
    <>
      {isShowLineLoader && <LineLoader />}
      <Dropdown.Root trigger={<Icon iconId={'group1399'} />}>
        <Dropdown.Item onClick={learnHandler}>
          {/*<NavLink className={s.learnLink} to={`${PATH.DECKSPAGE}/${deckId}/learn`}>*/}
          <Icon iconId={'playCircleOutline'} />
          <Typography.Caption>Learn</Typography.Caption>
          {/*</NavLink>*/}
        </Dropdown.Item>
        <Dropdown.Separator />
        <Dropdown.Item onClick={updateHandler}>
          <DeckModal
            deckData={{
              cover: deckByIdData.cover,
              isPrivate: deckByIdData.isPrivate,
              name: deckByIdData.name,
            }}
            onSubmit={updateDeckHandler}
            variant={'edit'}
          />
          {/*<Icon iconId={'editOutline'} />*/}
          <Typography.Caption>Edit</Typography.Caption>
        </Dropdown.Item>
        <Dropdown.Separator />
        <Dropdown.Item onClick={deleteHandler}>
          <CardDeleteModal
            cardName={deckByIdData.name}
            deleteCb={deleteDeckHandler}
            type={'Deck'}
          />
          {/*<Icon iconId={'trashOutline'} />*/}
          <Typography.Caption>Delete</Typography.Caption>
        </Dropdown.Item>
      </Dropdown.Root>
    </>
  )
}
