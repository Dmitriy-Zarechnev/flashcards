import {
  ComponentPropsWithRef,
  MouseEvent,
  ReactElement,
  KeyboardEvent as ReactKeyboardEvent,
  ReactNode,
  cloneElement,
  forwardRef,
  useEffect,
  useRef,
  useState,
} from 'react'

import { Card, IconButton, Typography } from '@/shared'

import s from './Dialog.module.scss'

type DialogProps = {
  title: string
  trigger: ReactNode
} & ComponentPropsWithRef<'div'>

export const Dialog = forwardRef<HTMLDivElement, DialogProps>(
  ({ children, id, title, trigger, ...rest }, ref) => {
    const [isShown, setShown] = useState(false)
    /* –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏, –∞ –æ—Ç–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
       —Ñ—É–Ω–∫—Ü–∏–∏ => handleMouseDown | handleMouseUp */
    const [isMouseDownInside, setMouseDownInside] = useState(false)

    /* üîπ—Å—Ç–µ–π—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
         1. —ç—Ç–∏–º —Å—Ç–µ–π—Ç–æ–º –±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏
         2. –ø–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–µ–Ω—è—Ç—å —Å—Ç–µ–π—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –∫–∞—Ä—Ç–∏–Ω–æ–∫, –≥–¥–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞
         3. –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –º–æ–¥–∞–ª–∫–µ, –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —á–µ—Ä–µ–∑ 0.5—Å => –∏–∑–±–µ–≥–∞–µ–º –º–∏—Å–∫–ª–∏–∫–æ–≤
            –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ */
    const [isBlocked, setBlocked] = useState(false)

    /* üçè –î–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ */
    const dialogRef = useRef<HTMLDivElement>(null)

    function show() {
      setShown(true)
    }

    function handleMouseDown(event: MouseEvent) {
      // –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏, —Ç.–µ. —É —Ç–µ–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å `.${s.card}`
      const card = (event.target as HTMLElement).closest(`.${s.card}`)

      // –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –º–æ–¥–∞–ª–∫–µ
      if (card) {
        setMouseDownInside(true)
      } else {
        setMouseDownInside(false)
      }
    }

    function handleMouseUp(event: MouseEvent) {
      /* üîπ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –º–æ–¥–∞–ª–∫–µ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∂–∞—Ç–∏–µ –∫–ª–∏–∫–∞ */
      if (isBlocked) {
        return
      }

      // –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏, —Ç.–µ. —É —Ç–µ–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å `.${s.card}`
      const card = (event.target as HTMLElement).closest(`.${s.card}`)

      // –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–π –∫–ª–∏–∫ –Ω–µ –ø–æ –º–æ–¥–∞–ª–∫–µ –∏ –ù–ê–ß–ê–õ–¨–ù–û–ï –ù–ê–ñ–ê–¢–ò–ï –±—ã–ª–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏
      if (!card && !isMouseDownInside) {
        // —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        setShown(false)
      }

      // –∫–ª–∏–∫ –Ω–∞—á–∞–ª—Å—è –≤–Ω—É—Ç—Ä–∏ –∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –≤–Ω—É—Ç—Ä–∏ => –≤–µ—Ä–Ω—É—Ç—å state –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setMouseDownInside(false)
    }

    function closeHandler(event: MouseEvent) {
      event.stopPropagation()
      setShown(false)
    }

    /**  –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ cb-fnc –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –≤ —Ñ–æ—Ä–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—é–¥–∞ –ø—Ä–∏–¥–µ—Ç –∫–∞–∫ children
   !!! children —Ç–æ–ª—å–∫–æ –∫–∞–∫ –æ–¥–∏–Ω —Ç–µ–≥ !!! */
    const enhancedChildren = cloneElement(children as ReactElement, {
      closeModal: () => {
        setShown(false)
      },
      /* üîπ –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */
      setBlocked: setBlocked,
    })

    /* üçè –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ */
    function handleKeyDown(event: ReactKeyboardEvent) {
      if (event.key === 'Tab') {
        const focusableElements = dialogRef.current?.querySelectorAll<HTMLElement>(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        )
        const firstElement = focusableElements?.[0]
        const lastElement = focusableElements?.[focusableElements.length - 1]

        if (event.shiftKey) {
          if (document.activeElement === firstElement) {
            lastElement?.focus()
            event.preventDefault()
          }
        } else {
          if (document.activeElement === lastElement) {
            firstElement?.focus()
            event.preventDefault()
          }
        }
      }
    }

    /* üçè –î–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ */
    useEffect(() => {
      if (isShown) {
        dialogRef.current?.focus()
      }
    }, [isShown])

    return (
      <div onClick={show} ref={ref} {...rest} id={id}>
        {trigger}
        {isShown && (
          <div
            className={s.overlay}
            onClick={handleMouseUp}
            onKeyDown={handleKeyDown} /* üçè –î–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ */
            onMouseDown={handleMouseDown}
            onMouseUp={handleMouseUp}
            ref={dialogRef} /* üçè –î–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ */
            tabIndex={-1} /* üçè –î–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ */
          >
            <Card
              className={s.card}
              fullWidth={false}
              onClick={e => e.stopPropagation()}
              style={{ padding: '0' }}
            >
              <div className={s.header}>
                <Typography.H3>{title}</Typography.H3>
                <IconButton
                  height={'14px'}
                  iconId={'dialogClose'}
                  onClick={closeHandler}
                  viewBox={'0 0 12 12'}
                  width={'14px'}
                />
              </div>
              {enhancedChildren}
            </Card>
          </div>
        )}
      </div>
    )
  }
)
